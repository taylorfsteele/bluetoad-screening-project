{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useForm","register","handleSubmit","useState","images","setImages","onSubmit","data","a","process","url","search","fetch","method","response","json","jsonResponse","photoList","photos","photo","console","log","style","position","top","width","zIndex","backgroundColor","noValidate","padding","textAlign","TextField","inputRef","required","name","variant","margin","fullWidth","label","autoFocus","Button","height","type","color","marginTop","length","map","i","paddingTop","key","src","farm","server","id","secret","alt","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAmEeA,MA7Df,WAAgB,IAAD,EACqBC,cAA3BC,EADM,EACNA,SAAUC,EADJ,EACIA,aADJ,EAEcC,mBAAS,IAFvB,mBAEPC,EAFO,KAECC,EAFD,KAGRC,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACDC,mCADC,SAGTC,EAHS,oFACDD,mCADC,iBAGyFF,EAAKI,OAH9F,2EAIQC,MAAMF,EAAK,CACjCG,OAAQ,QALM,cAITC,EAJS,gBAOYA,EAASC,OAPrB,OAOTC,EAPS,OAQTC,EAAYD,EAAaE,OAAOC,MACtCd,EAAUY,GATK,kDAWfG,QAAQC,IAAR,MAXe,0DAAH,sDAed,OACC,oCACC,yBACCC,MAAO,CAAEC,SAAU,QAASC,IAAK,EAAGC,MAAO,OAAQC,OAAQ,EAAGC,gBAAiB,UAE/E,0BACCrB,SAAUJ,EAAaI,GACvBsB,YAAU,EACVN,MAAO,CAAEG,MAAO,OAAQI,QAAS,GAAIC,UAAW,WAEhD,kBAACC,EAAA,EAAD,CAECC,SAAU/B,EAAS,CAAEgC,UAAU,IAC/BC,KAAK,SACLC,QAAQ,WACRC,OAAO,SACPH,UAAQ,EACRI,WAAS,EACTC,MAAM,eACNC,WAAS,IAEV,kBAACC,EAAA,EAAD,CAAQlB,MAAO,CAAEmB,OAAQ,IAAMC,KAAK,SAASP,QAAQ,YAAYQ,MAAM,WAAvE,YAMF,yBAAKrB,MAAO,CAAEsB,UAAW,IAAKrB,SAAU,cACrCnB,EAAOyC,QAAU,uDAClBzC,EAAO0C,KAAI,SAAC3B,EAAO4B,GAAR,OACX,yBAAKzB,MAAO,CAAE0B,WAAY,GAAIZ,OAAQ,OAAQX,MAAO,MAAOK,UAAW,WACtE,yBACCmB,IAAKF,EACLG,IAAG,sBAAiB/B,EAAMgC,KAAvB,6BAAgDhC,EAAMiC,OAAtD,YAAgEjC,EAAMkC,GAAtE,YAA4ElC,EAAMmC,OAAlF,QACHC,IAAKpC,EAAMqC,eC9CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.6bd54afe.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst { register, handleSubmit } = useForm();\n\tconst [images, setImages] = useState([]);\n\tconst onSubmit = async (data) => {\n\t\tconst apiKey = process.env.REACT_APP_APIKey;\n\t\ttry {\n\t\t\tconst url = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${data.search}&safe_search=1&per_page=25&page=1&format=json&nojsoncallback=1`;\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: \"GET\",\n\t\t\t});\n\t\t\tconst jsonResponse = await response.json();\n\t\t\tconst photoList = jsonResponse.photos.photo;\n\t\t\tsetImages(photoList);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div\n\t\t\t\tstyle={{ position: \"fixed\", top: 0, width: \"100%\", zIndex: 1, backgroundColor: \"white\" }}\n\t\t\t>\n\t\t\t\t<form\n\t\t\t\t\tonSubmit={handleSubmit(onSubmit)}\n\t\t\t\t\tnoValidate\n\t\t\t\t\tstyle={{ width: \"auto\", padding: 30, textAlign: \"center\" }}\n\t\t\t\t>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\t//Reference for useForm and field name\n\t\t\t\t\t\tinputRef={register({ required: true })}\n\t\t\t\t\t\tname=\"search\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tlabel=\"Image Search\"\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t/>\n\t\t\t\t\t<Button style={{ height: 50 }} type=\"submit\" variant=\"contained\" color=\"primary\">\n\t\t\t\t\t\tSearch\n\t\t\t\t\t</Button>\n\t\t\t\t</form>\n\t\t\t</div>\n\n\t\t\t<div style={{ marginTop: 200, position: \"relative\" }}>\n\t\t\t\t{!images.length && <h2>Search for some images!</h2>}\n\t\t\t\t{images.map((photo, i) => (\n\t\t\t\t\t<div style={{ paddingTop: 20, margin: \"auto\", width: \"50%\", textAlign: \"center\" }}>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tsrc={`https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`}\n\t\t\t\t\t\t\talt={photo.title}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}